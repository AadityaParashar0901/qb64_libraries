Function CreateBitPack1$ (__IMAGE&)
    __SOURCE& = _Source
    _Source __IMAGE&
    __WIDTH% = _Width(__IMAGE&)
    __HEIGHT% = _Height(__IMAGE&)
    __L! = __WIDTH% * __HEIGHT% / 8
    __L~& = Int(__L!) + Sgn(__L! - Int(__L!))
    __IMAGE$ = "BP1" + MKI$(__WIDTH%) + MKI$(__HEIGHT%) + String$(__L~&, 0)
    __K~& = 56
    For __X% = 0 To __WIDTH% - 1
        For __Y% = 0 To __HEIGHT% - 1
            __P& = Point(__X%, __Y%)
            If _Red32(__P&) + _Green32(__P&) + _Blue32(__P&) > 381 And _Alpha32(__P&) = 255 Then Asc(__IMAGE$, 1 + _SHR(__K~&, 3)) = _SetBit(Asc(__IMAGE$, 1 + _SHR(__K~&, 3)), __K~& Mod 8)
            __K~& = __K~& + 1
    Next __Y%, __X%
    _Source __SOURCE&
    CreateBitPack1$ = __IMAGE$
End Function
Function CreateBitPack256$ (__IMAGE&)
    __SOURCE& = _Source
    _Source __IMAGE&
    __WIDTH% = _Width(__IMAGE&)
    __HEIGHT% = _Height(__IMAGE&)
    __L~& = __WIDTH% * __HEIGHT%
    __IMAGE$ = "BP2" + MKI$(__WIDTH%) + MKI$(__HEIGHT%) + String$(__L~&, 0)
    __K~& = 7
    For __X% = 0 To __WIDTH% - 1
        For __Y% = 0 To __HEIGHT% - 1
            __P~%% = Point(__X%, __Y%)
            __K~& = __K~& + 1
            Asc(__IMAGE$, __K~&) = __P~%%
    Next __Y%, __X%
    _Source __SOURCE&
    CreateBitPack256$ = __IMAGE$
End Function
Function CreateBitPack32$ (__IMAGE&)
    __SOURCE& = _Source
    _Source __IMAGE&
    __WIDTH% = _Width(__IMAGE&)
    __HEIGHT% = _Height(__IMAGE&)
    __L~& = __WIDTH% * __HEIGHT% * 4
    __IMAGE$ = "BP3" + MKI$(__WIDTH%) + MKI$(__HEIGHT%) + String$(__L~&, 0)
    __K~& = 8
    For __X% = 0 To __WIDTH% - 1
        For __Y% = 0 To __HEIGHT% - 1
            __P& = Point(__X%, __Y%)
            Mid$(__IMAGE$, __K~& + 1, 4) = MKL$(__P&)
            __K~& = __K~& + 4
    Next __Y%, __X%
    _Source __SOURCE&
    CreateBitPack32$ = __IMAGE$
End Function
Function LoadBitPack$ (__FILE$)
    __F = FreeFile
    Open __FILE$ For Binary As #__F
    __IMAGE$ = String$(LOF(__F), 0)
    Get #__F, , __IMAGE$
    Close #__F
    LoadBitPack$ = _Inflate$(__IMAGE$)
    __IMAGE$ = ""
End Function
Sub SaveBitPack (__FILE$, __IMAGE$)
    __F = FreeFile
    Open __FILE$ For Binary As #__F
    __TMP$ = _Deflate$(__IMAGE$)
    Put #__F, , __TMP$
    Close #__F
    __TMP$ = ""
End Sub
Sub DrawBitPack (__IMAGE$, __OX%, __OY%, __COLOR&)
    If Left$(__IMAGE$, 2) <> "BP" Or Len(__IMAGE$) < 7 Then Exit Sub
    __WIDTH% = CVI(Mid$(__IMAGE$, 3, 2))
    __HEIGHT% = CVI(Mid$(__IMAGE$, 5, 2))
    $Checking:Off
    Select Case Asc(__IMAGE$, 3)
        Case 49
            __K~& = 56
            For __X% = 0 To __WIDTH% - 1
                For __Y% = 0 To __HEIGHT% - 1
                    PSet (__OX% + __X%, __OY% + __Y%), __COLOR& And _ReadBit(Asc(__IMAGE$, 1 + _SHR(__K~&, 3)), __K~& Mod 8)
                    __K~& = __K~& + 1
            Next __Y%, __X%
        Case 50
            __K~& = 7
            For __X% = 0 To __WIDTH% - 1
                For __Y% = 0 To __HEIGHT% - 1
                    __K~& = __K~& + 1
                    PSet (__OX% + __X%, __OY% + __Y%), Asc(__IMAGE$, __K~&)
            Next __Y%, __X%
        Case 51
            __K~& = 8
            For __X% = 0 To __WIDTH% - 1
                For __Y% = 0 To __HEIGHT% - 1
                    PSet (__OX% + __X%, __OY% + __Y%), CVL(Mid$(__IMAGE$, __K~& + 1, 4))
                    __K~& = __K~& + 4
            Next __Y%, __X%
    End Select
    $Checking:On
End Sub
Sub DrawBitPackPart (__IMAGE$, __OX%, __OY%, __COLOR&, __I1X%, __I1Y%, __I2X%, __I2Y%)
    If Left$(__IMAGE$, 2) <> "BP" Or Len(__IMAGE$) < 7 Then Exit Sub
    __WIDTH% = CVI(Mid$(__IMAGE$, 3, 2))
    __HEIGHT% = CVI(Mid$(__IMAGE$, 5, 2))
    $Checking:Off
    Select Case Asc(__IMAGE$, 3)
        Case 49
            __K~& = 56
            For __X% = 0 To __WIDTH% - 1
                For __Y% = 0 To __HEIGHT% - 1
                    If __I1X% <= __X% And __X% <= __I2X% And __I1Y% <= __Y% And __Y% <= __I2Y% Then PSet (__OX% - __I1X% + __X%, __OY% - __I1Y% + __Y%), __COLOR& And _ReadBit(Asc(__IMAGE$, 1 + _SHR(__K~&, 3)), __K~& Mod 8)
                    __K~& = __K~& + 1
            Next __Y%, __X%
        Case 50
            __K~& = 7
            For __X% = 0 To __WIDTH% - 1
                For __Y% = 0 To __HEIGHT% - 1
                    __K~& = __K~& + 1
                    If __I1X% <= __X% And __X% <= __I2X% And __I1Y% <= __Y% And __Y% <= __I2Y% Then PSet (__OX% - __I1X% + __X%, __OY% - __I1Y% + __Y%), Asc(__IMAGE$, __K~&)
            Next __Y%, __X%
        Case 51
            __K~& = 8
            For __X% = 0 To __WIDTH% - 1
                For __Y% = 0 To __HEIGHT% - 1
                    If __I1X% <= __X% And __X% <= __I2X% And __I1Y% <= __Y% And __Y% <= __I2Y% Then PSet (__OX% - __I1X% + __X%, __OY% - __I1Y% + __Y%), CVL(Mid$(__IMAGE$, __K~& + 1, 4))
                    __K~& = __K~& + 4
            Next __Y%, __X%
    End Select
    $Checking:On
End Sub
Sub DrawBitPackScale (__IMAGE$, __OX%, __OY%, __COLOR&, __SCALE_X!, __SCALE_Y!)
    If Left$(__IMAGE$, 2) <> "BP" Or Len(__IMAGE$) < 7 Then Exit Sub
    __WIDTH% = CVI(Mid$(__IMAGE$, 3, 2))
    __HEIGHT% = CVI(Mid$(__IMAGE$, 5, 2))
    $Checking:Off
    Select Case Asc(__IMAGE$, 3)
        Case 49
            __K~& = 56
            For __X% = 0 To __WIDTH% - 1
                For __Y% = 0 To __HEIGHT% - 1
                    PSet (__OX% + __X% * __SCALE_X!, __OY% + __Y% * __SCALE_Y!), __COLOR& And _ReadBit(Asc(__IMAGE$, 1 + _SHR(__K~&, 3)), __K~& Mod 8)
                    __K~& = __K~& + 1
            Next __Y%, __X%
        Case 50
            __K~& = 7
            For __X% = 0 To __WIDTH% - 1
                For __Y% = 0 To __HEIGHT% - 1
                    __K~& = __K~& + 1
                    PSet (__OX% + __X% * __SCALE_X!, __OY% + __Y% * __SCALE_Y!), Asc(__IMAGE$, __K~&)
            Next __Y%, __X%
        Case 51
            __K~& = 8
            For __X% = 0 To __WIDTH% - 1
                For __Y% = 0 To __HEIGHT% - 1
                    PSet (__OX% + __X% * __SCALE_X!, __OY% + __Y% * __SCALE_Y!), CVL(Mid$(__IMAGE$, __K~& + 1, 4))
                    __K~& = __K~& + 4
            Next __Y%, __X%
    End Select
    $Checking:On
End Sub
Sub DrawBitPackPartScale (__IMAGE$, __OX%, __OY%, __COLOR&, __I1X%, __I1Y%, __I2X%, __I2Y%, __SCALE_X!, __SCALE_Y!)
    If Left$(__IMAGE$, 2) <> "BP" Or Len(__IMAGE$) < 7 Then Exit Sub
    __WIDTH% = CVI(Mid$(__IMAGE$, 3, 2))
    __HEIGHT% = CVI(Mid$(__IMAGE$, 5, 2))
    $Checking:Off
    Select Case Asc(__IMAGE$, 3)
        Case 49
            __K~& = 56
            For __X% = 0 To __WIDTH% - 1
                For __Y% = 0 To __HEIGHT% - 1
                    If __I1X% <= __X% And __X% <= __I2X% And __I1Y% <= __Y% And __Y% <= __I2Y% Then PSet (__OX% + (__X% - __I1X%) * __SCALE_X!, __OY% + (__Y% - __I1Y%) * __SCALE_Y!), __COLOR& And _ReadBit(Asc(__IMAGE$, 1 + _SHR(__K~&, 3)), __K~& Mod 8)
                    __K~& = __K~& + 1
            Next __Y%, __X%
        Case 50
            __K~& = 7
            For __X% = 0 To __WIDTH% - 1
                For __Y% = 0 To __HEIGHT% - 1
                    __K~& = __K~& + 1
                    If __I1X% <= __X% And __X% <= __I2X% And __I1Y% <= __Y% And __Y% <= __I2Y% Then PSet (__OX% + (__X% - __I1X%) * __SCALE_X!, __OY% + (__Y% - __I1Y%) * __SCALE_Y!), Asc(__IMAGE$, __K~&)
            Next __Y%, __X%
        Case 51
            __K~& = 8
            For __X% = 0 To __WIDTH% - 1
                For __Y% = 0 To __HEIGHT% - 1
                    If __I1X% <= __X% And __X% <= __I2X% And __I1Y% <= __Y% And __Y% <= __I2Y% Then PSet (__OX% + (__X% - __I1X%) * __SCALE_X!, __OY% + (__Y% - __I1Y%) * __SCALE_Y!), CVL(Mid$(__IMAGE$, __K~& + 1, 4))
                    __K~& = __K~& + 4
            Next __Y%, __X%
    End Select
    $Checking:On
End Sub
